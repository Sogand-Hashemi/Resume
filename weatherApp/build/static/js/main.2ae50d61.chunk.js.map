{"version":3,"sources":["componenets/Titles.js","componenets/Form.js","componenets/BgDesign.js","componenets/Weather.js","componenets/PigeonMaps.js","App.js","serviceWorker.js","index.js"],"names":["Titles","className","Form","props","onSubmit","getWeather","type","name","placeholder","BgDesign","React","Component","Weather","city","country","temperature","humidity","description","error","PigeonMaps","center","this","lat","lon","zoom","anchor","payload","onClick","event","offset","width","height","alt","console","log","API_KEY","App","state","undefined","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","setState","main","temp","sys","weather","coord","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2ae50d61.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Titles = () =>(\r\n    <div className='col-md-12 text-center col-lg-12 col-sm-12 col-xs-12 title'>\r\n        <h1>اطلاعات آب و هوایی مناطق</h1>\r\n        <p>مشاهده ی دما، رطوبت و...</p>\r\n    </div>\r\n     );\r\n\r\nexport default Titles;","import React from 'react';\r\n// import GoogleMap from \"./PigeonmMaps\";\r\n\r\nconst Form = props =>(\r\n\r\n    <form className='col-md-5 col-sm-5 col-lg-5 col-xs-12' onSubmit={props.getWeather} >\r\n        <input type=\"text\" className='inputs' name='city' placeholder='  شهر...'/>\r\n        <input type=\"text\" className='inputs' name='country' placeholder='  کشور...'/>\r\n        <button className='btn form-btn btn-info'>مشاهده </button>\r\n    </form>\r\n\r\n    );\r\n\r\nexport default Form;","import React from 'react';\r\n\r\n\r\nclass BgDesign extends React.Component\r\n{\r\n    render(){\r\n        return(\r\n            <div className='col-md-7 bg-design col-sm-7 col-lg-7 col-xs-12'>\r\n                <span className='cloud-1' />\r\n                <span className='cloud-2' />\r\n                <span className='sun' />\r\n                <span className='cloud-3' />\r\n                <span className='cloud-4' />\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default BgDesign;","import React from 'react';\r\n\r\nconst Weather = props => (\r\n    <div className='col-md-5 weather text-center col-sm-5 col-lg-5 col-xs-12'>\r\n        {props.city && props.country && <h3>موقعیت:  {props.city}, {props.country}</h3>}\r\n        {props.temperature && <h3>دما:  &#8451; {props.temperature}</h3>}\r\n        {props.humidity && <h3>رطوبت:  &#37; {props.humidity}</h3> }\r\n        {props.description && <h3>شرایط جوی: {props.description}</h3>}\r\n        {props.error && <h3>{props.error}</h3>}\r\n        {/*{props.lat && <h3>lat: {props.lat}</h3>}*/}\r\n        {/*{props.lon && <h3>lng: {props.lon}</h3>}*/}\r\n    </div>\r\n);\r\n\r\n\r\n\r\n\r\nexport default Weather;\r\n","\r\nimport React from 'react';\r\n// import {Map, InfoWindow, Marker, GoogleApiWrapper, } from 'google-maps-react';\r\n\r\nimport Map from 'pigeon-maps'\r\nimport Marker from 'pigeon-marker'\r\nimport Overlay from 'pigeon-overlay'\r\n\r\nclass PigeonMaps extends React.Component{\r\nrender() {\r\n    return (\r\n        <div className='col-md-12 PigeonMaps text-center col-lg-12 col-sm-12 col-xs-12'>\r\n\r\n            <Map  center={[this.props.lat, this.props.lon]} zoom={14} >\r\n                <Marker anchor={[this.props.lat, this.props.lon]} payload={2} onClick={({ event, anchor, payload }) => {}} />\r\n\r\n                <Overlay anchor={[this.props.lat, this.props.lon]} offset={[120, 79]}>\r\n                    <img width={240} height={158} alt='' />\r\n                </Overlay>\r\n            </Map>\r\n            {console.log(this.props.lat, this.props.lon)}\r\n        </div>\r\n    );\r\n}\r\n}\r\n\r\nexport default PigeonMaps;","import React from 'react';\r\n\r\nimport Titles from \"./componenets/Titles\";\r\nimport Form from \"./componenets/Form\";\r\nimport BgDesign from \"./componenets/BgDesign\";\r\nimport Weather from \"./componenets/Weather\";\r\n// import GoogleMap from \"./componenets/PigeonmMaps\";\r\nimport PigeonMaps from \"./componenets/PigeonMaps\";\r\n// const apiKey = 'AIzaSyDaVdYhviOhDIGNtNGM2JEKu1pwibrwOBA';\r\nconst API_KEY = '77d238f0efc00f10afc0eff085241815' ;\r\n\r\nclass App extends React.Component {\r\n\r\n    state={\r\n        temperature: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        humidity: undefined,\r\n        description: undefined,\r\n        lat:51.4,\r\n        lon:35.7,\r\n        error: undefined\r\n    };\r\n\r\n    getWeather = async (e) => {\r\n        e.preventDefault();\r\n        const city = e.target.elements.city.value;\r\n        const country = e.target.elements.country.value;\r\n        const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=35&lon=139&q=${city},${country}&appid=${API_KEY}&units=metric`);\r\n        const data = await api_call.json();\r\n        console.log(data);\r\n        if (city && country) {\r\n            this.setState({\r\n                temperature: data.main.temp,\r\n                city: data.name,\r\n                country: data.sys.country,\r\n                humidity: data.main.humidity,\r\n                description: data.weather[0].description,\r\n                lat:data.coord.lat,\r\n                lon:data.coord.lon,\r\n                error: ''\r\n    \r\n            });\r\n        }else {\r\n            this.setState({\r\n                temperature: undefined,\r\n                city: undefined,\r\n                country: undefined,\r\n                humidity: undefined,\r\n                description: undefined,\r\n                lat:undefined,\r\n                lon:undefined,\r\n                error: 'لطفا مقادیر را وارد کنید'\r\n\r\n            });\r\n        }\r\n    };\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div className='container'>\r\n                <Titles />\r\n                <Form getWeather={this.getWeather} />\r\n                <BgDesign/>\r\n                <Weather\r\n                    temperature={this.state.temperature}\r\n                    city={this.state.city}\r\n                    country={this.state.country}\r\n                    humidity={this.state.humidity}\r\n                    description={this.state.description}\r\n                    lat={this.state.lat}\r\n                    lon={this.state.lon}\r\n                    error={this.state.error}\r\n                />\r\n                <PigeonMaps lat={this.state.lat} lon={this.state.lon} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './bootstrap-rtl/bootstrap-flipped.min.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './index.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}