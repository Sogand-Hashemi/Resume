{"version":3,"sources":["componenets/Titles.js","componenets/Form.js","componenets/BgDesign.js","componenets/Weather.js","componenets/LocationPin.js","componenets/ReactMapGl.js","App.js","serviceWorker.js","index.js"],"names":["Titles","className","Form","props","onSubmit","getWeather","type","name","placeholder","BgDesign","React","Component","Weather","city","country","temperature","humidity","description","error","LocationPin","xmlns","enableBackground","viewBox","cx","cy","fill","rx","ry","d","Mapgl","center","this","lat","lon","width","height","latitude","longitude","API_KEY","App","state","undefined","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","console","log","setState","main","temp","sys","weather","coord","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+SASeA,EAPA,kBACX,yBAAKC,UAAU,6DACX,4JACA,8ICQOC,EAXF,SAAAC,GAAK,OAEd,0BAAMF,UAAU,uCAAuCG,SAAUD,EAAME,YACnE,2BAAOC,KAAK,OAAOL,UAAU,SAASM,KAAK,OAAOC,YAAY,4BAC9D,2BAAOF,KAAK,OAAOL,UAAU,SAASM,KAAK,UAAUC,YAAY,kCACjE,4BAAQP,UAAU,yBAAlB,2CCYOQ,E,uKAbP,OACI,yBAAKR,UAAU,kDACX,0BAAMA,UAAU,YAChB,0BAAMA,UAAU,YAChB,0BAAMA,UAAU,QAChB,0BAAMA,UAAU,YAChB,0BAAMA,UAAU,iB,GATTS,IAAMC,WCcdC,EAfC,SAAAT,GAAK,OACjB,yBAAKF,UAAU,4DACVE,EAAMU,MAAQV,EAAMW,SAAW,sEAAcX,EAAMU,KAApB,KAA4BV,EAAMW,SACjEX,EAAMY,aAAe,2DAAmBZ,EAAMY,aAC9CZ,EAAMa,UAAY,kEAAmBb,EAAMa,UAC3Cb,EAAMc,aAAe,kFAAgBd,EAAMc,aAC3Cd,EAAMe,OAAS,4BAAKf,EAAMe,S,sBCwBpBC,MA7Bf,WACE,OACE,yBACEC,MAAM,6BACNC,iBAAiB,gBACjBC,QAAQ,YACRrB,UAAU,gBAEV,2BACE,6BACEsB,GAAG,KACHC,GAAG,SACHC,KAAK,UACLC,GAAG,QACHC,GAAG,UAEL,0BACEF,KAAK,UACLG,EAAE,qbAEJ,0BACEH,KAAK,UACLG,EAAE,0HCHGC,E,uKAjBH,IAAD,EACP,OACI,yBAAK5B,UAAU,kEACX,kBAAC,KAAD,GAAY6B,OAAQ,CAACC,KAAK5B,MAAM6B,IAAKD,KAAK5B,MAAM8B,KAAMC,MAAO,OAAQC,OAAQ,OAAQC,SAAUL,KAAK5B,MAAM6B,IAAKK,UAAWN,KAAK5B,MAAM8B,KAArI,uBAAkJ,SAAlJ,qBAAiK,IAAjK,qCACuB,qGADvB,yBAEW,2DAFX,GAIE,kBAAC,IAAD,CAAQI,UAAWN,KAAK5B,MAAM8B,IAAKG,SAAUL,KAAK5B,MAAM6B,KACtD,kBAAC,EAAD,QAGJ,kC,GAbQtB,IAAMC,WCIpB2B,EAAU,mCAyEDC,E,4MArEXC,MAAM,CACFzB,iBAAa0B,EACb5B,UAAM4B,EACN3B,aAAS2B,EACTzB,cAAUyB,EACVxB,iBAAawB,EACbT,IAAI,KACJC,IAAI,KACJf,WAAOuB,G,EAGXpC,W,uCAAa,WAAOqC,GAAP,qBAAAC,EAAA,6DACTD,EAAEE,iBACI/B,EAAO6B,EAAEG,OAAOC,SAASjC,KAAKkC,MAC9BjC,EAAU4B,EAAEG,OAAOC,SAAShC,QAAQiC,MAHjC,SAIcC,MAAM,oEAAD,OAAqEnC,EAArE,YAA6EC,EAA7E,kBAA8FwB,EAA9F,kBAJnB,cAIHW,EAJG,gBAKUA,EAASC,OALnB,OAKHC,EALG,OAMTC,QAAQC,IAAIF,GACRtC,GAAQC,EACR,EAAKwC,SAAS,CACVvC,YAAaoC,EAAKI,KAAKC,KACvB3C,KAAMsC,EAAK5C,KACXO,QAASqC,EAAKM,IAAI3C,QAClBE,SAAUmC,EAAKI,KAAKvC,SACpBC,YAAakC,EAAKO,QAAQ,GAAGzC,YAC7Be,IAAImB,EAAKQ,MAAM3B,IACfC,IAAIkB,EAAKQ,MAAM1B,IACff,MAAO,KAIX,EAAKoC,SAAS,CACVvC,iBAAa0B,EACb5B,UAAM4B,EACN3B,aAAS2B,EACTzB,cAAUyB,EACVxB,iBAAawB,EACbT,SAAIS,EACJR,SAAIQ,EACJvB,MAAO,iIA5BN,4C,6GAoCT,OACI,yBAAKjB,UAAU,aACX,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMI,WAAY0B,KAAK1B,aACvB,kBAAC,EAAD,MACA,kBAAC,EAAD,CACIU,YAAagB,KAAKS,MAAMzB,YACxBF,KAAMkB,KAAKS,MAAM3B,KACjBC,QAASiB,KAAKS,MAAM1B,QACpBE,SAAUe,KAAKS,MAAMxB,SACrBC,YAAac,KAAKS,MAAMvB,YACxBe,IAAKD,KAAKS,MAAMR,IAChBC,IAAKF,KAAKS,MAAMP,IAChBf,MAAOa,KAAKS,MAAMtB,QAEtB,kBAAC,EAAD,CAAOc,IAAKD,KAAKS,MAAMR,IAAKC,IAAKF,KAAKS,MAAMP,W,GAhE1CvB,IAAMC,WCGJiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ee731570.chunk.js","sourcesContent":["import React from 'react';\n\nconst Titles = () =>(\n    <div className='col-md-12 text-center col-lg-12 col-sm-12 col-xs-12 title'>\n        <h1>اطلاعات آب و هوایی مناطق</h1>\n        <p>مشاهده ی دما، رطوبت و...</p>\n    </div>\n     );\n\nexport default Titles;","import React from 'react';\n\nconst Form = props =>(\n\n    <form className='col-md-5 col-sm-5 col-lg-5 col-xs-12' onSubmit={props.getWeather} >\n        <input type=\"text\" className='inputs' name='city' placeholder='  شهر...'/>\n        <input type=\"text\" className='inputs' name='country' placeholder='  کشور...'/>\n        <button className='btn form-btn btn-info'>مشاهده </button>\n    </form>\n\n    );\n    \n\nexport default Form;","import React from 'react';\n\n\nclass BgDesign extends React.Component\n{\n    render(){\n        return(\n            <div className='col-md-7 bg-design col-sm-7 col-lg-7 col-xs-12'>\n                <span className='cloud-1' />\n                <span className='cloud-2' />\n                <span className='sun' />\n                <span className='cloud-3' />\n                <span className='cloud-4' />\n            </div>\n        )\n    }\n\n}\n\nexport default BgDesign;","import React from 'react';\n\nconst Weather = props => (\n    <div className='col-md-5 weather text-center col-sm-5 col-lg-5 col-xs-12'>\n        {props.city && props.country && <h3>موقعیت:  {props.city}, {props.country}</h3>}\n        {props.temperature && <h3>دما:  &#8451; {props.temperature}</h3>}\n        {props.humidity && <h3>رطوبت:  &#37; {props.humidity}</h3> }\n        {props.description && <h3>شرایط جوی: {props.description}</h3>}\n        {props.error && <h3>{props.error}</h3>}\n        {/*{props.lat && <h3>lat: {props.lat}</h3>}*/}\n        {/*{props.lon && <h3>lng: {props.lon}</h3>}*/}\n    </div>\n);\n\n\n\n\nexport default Weather;\n","import React from \"react\";\nimport '../index.css';\n\nfunction LocationPin() {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      enableBackground=\"new 0 0 48 48\"\n      viewBox=\"0 0 48 48\"\n      className=\"location-pin\"\n    >\n      <g>\n        <ellipse\n          cx=\"24\"\n          cy=\"34.739\"\n          fill=\"#F43734\"\n          rx=\"2.933\"\n          ry=\"0.943\"\n        ></ellipse>\n        <path\n          fill=\"#F43734\"\n          d=\"M24.005 12.318c-3.77 0-6.81 3.05-6.81 6.81 0 .14.01.28.02.42.03.56.13 1.12.31 1.66.17.53.4 1.03.71 1.5.02.03.21.3.5.74l.01.01c1.3 1.96 4.73 7.09 4.75 7.12.24.36.77.36 1.01 0 .01-.02.03-.04.04-.05.07-.11 5.11-7.66 5.27-7.89.04-.07.09-.14.13-.21.27-.46.47-.95.61-1.46.17-.6.25-1.22.25-1.84 0-3.76-3.05-6.81-6.8-6.81zm.17 10.26c-1.5.09-2.79-1.05-2.89-2.55a2.718 2.718 0 012.54-2.88c1.5-.1 2.8 1.04 2.89 2.54.09 1.5-1.04 2.79-2.54 2.89z\"\n        ></path>\n        <path\n          fill=\"#FC6060\"\n          d=\"M18.553 16.724s1.553-3.765 5.447-3.49c0 0 1.152-.005 1.151.549 0 .654-1.151.456-1.151.456s-3.392-.412-5.447 2.485z\"\n        ></path>\n      </g>\n    </svg>\n  );\n}\n\nexport default LocationPin;","import React from 'react';\nimport ReactMapGL,{Marker} from 'react-map-gl';\nimport LocationPin from './LocationPin';\nclass Mapgl extends React.Component {\n\n  render() {\n    return (\n        <div className='col-md-12 PigeonMaps text-center col-lg-12 col-sm-12 col-xs-12'>\n            <ReactMapGL center={[this.props.lat, this.props.lon]} width={'100%'} height={'100%'} latitude={this.props.lat} longitude={this.props.lon} height={'400px'} zoom={10}\n              mapboxApiAccessToken=\"pk.eyJ1Ijoic29nYW5kaGFzaGVtaSIsImEiOiJjazlwbDkyaTcwYXVyM3NydHlsZW5oazB2In0.K5Qo6dYD8216kmOoubPyBQ\"\n              mapStyle=\"mapbox://styles/sogandhashemi/ck9px1e1l0qif1iq8ntfml1ho\"\n              >\n              <Marker longitude={this.props.lon} latitude={this.props.lat} >\n                <LocationPin />\n              </Marker>\n            </ReactMapGL>\n            <br />\n        </div>\n    );\n  }\n}\n\nexport default Mapgl;","import React from 'react';\nimport Titles from \"./componenets/Titles\";\nimport Form from \"./componenets/Form\";\nimport BgDesign from \"./componenets/BgDesign\";\nimport Weather from \"./componenets/Weather\";\nimport Mapgl from \"./componenets/ReactMapGl\";\n// const apiKey = 'AIzaSyDaVdYhviOhDIGNtNGM2JEKu1pwibrwOBA';\nconst API_KEY = '77d238f0efc00f10afc0eff085241815' ;\n\nclass App extends React.Component {\n\n    state={\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        lat:51.4,\n        lon:35.7,\n        error: undefined\n    };\n\n    getWeather = async (e) => {\n        e.preventDefault();\n        const city = e.target.elements.city.value;\n        const country = e.target.elements.country.value;\n        const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=35&lon=139&q=${city},${country}&appid=${API_KEY}&units=metric`);\n        const data = await api_call.json();\n        console.log(data);\n        if (city && country) {\n            this.setState({\n                temperature: data.main.temp,\n                city: data.name,\n                country: data.sys.country,\n                humidity: data.main.humidity,\n                description: data.weather[0].description,\n                lat:data.coord.lat,\n                lon:data.coord.lon,\n                error: ''\n    \n            });\n        }else {\n            this.setState({\n                temperature: undefined,\n                city: undefined,\n                country: undefined,\n                humidity: undefined,\n                description: undefined,\n                lat:undefined,\n                lon:undefined,\n                error: 'لطفا مقادیر را وارد کنید'\n\n            });\n        }\n    };\n\n\n    render(){\n        return(\n            <div className='container'>\n                <Titles />\n                <Form getWeather={this.getWeather} />\n                <BgDesign/>\n                <Weather\n                    temperature={this.state.temperature}\n                    city={this.state.city}\n                    country={this.state.country}\n                    humidity={this.state.humidity}\n                    description={this.state.description}\n                    lat={this.state.lat}\n                    lon={this.state.lon}\n                    error={this.state.error}\n                />\n                <Mapgl lat={this.state.lat} lon={this.state.lon} />\n            </div>\n        );\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './bootstrap-rtl/bootstrap-flipped.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}